x="", y="", subtitle=subtitle, caption="Each year/month combination shows new activations in that month") +
theme_tufte() +
theme(legend.position="bottom") +
theme(strip.text.x = element_text(size = 7)) +
scale_colour_discrete(guide = FALSE) +
guides(fill=guide_legend(title="")) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
print(p)
fname = paste0(c, "_", "terminal_growth_binned.png")
save_plot(config, p, fname, subdir="maps", width=4.5, height=6)
}
#bar chart for month on month growth
p = df %>%
group_by(ABSOLUTE_BEAM_ID, year, month, month_year) %>%
summarise(count = n()) %>%
ggplot(aes(x=month_year, y=count, fill=ABSOLUTE_BEAM_ID)) +
geom_col(position="dodge", width = .6) +
labs(title="New Terminal activations",
x="", y="Count", subtitle=config$gateway$gateway1.nw_name, caption="") +
theme_bw() +
theme(legend.position="bottom",
legend.background = element_rect(fill = "transparent", size = 1),
axis.text.x = element_text(angle = 90, vjust=1, hjust=1)) +
guides(fill=guide_legend(title=""))
#if there are more than 2 beams then facet the chart by beam
if(NROW(beam_centers_df) > 2)
{
p = p + facet_wrap(~ABSOLUTE_BEAM_ID, ncol = 3) + theme(legend.position="none")
}
if(NROW(beam_centers_df) <= 8)
{
p = p + scale_fill_brewer(palette = "Dark2")  # Color palette
width = 6
height = 4
} else {
width = 8
height = 6
}
print(p)
save_plot(config, p, "terminal_activations_bar_graph.png", width, height, subdir="plots")
}
plot_terminal_locations_density <- function(config, beam_centers_df, df)
{
# Plots a stat_density_2d plot for Terminals in all beams. The idea is to take care
# of overplotting by using kernel density plot. Look at
# https://journal.r-project.org/archive/2013-1/kahle-wickham.pdf for reference.
#
# Args:
#   beam_centers_df: dataframe, dataframe containing lat/lng/loc for beam centers
#   df: dataframe, dataframe containing lat/long and other information for each terminal.
# Returns:
#
#begin plotting things on map
STACK_TRACE()
map<-get_map_wrapper(location=config$gateway$gateway1.location_for_map, zoom=config$gateway$gateway1.zoom_level_for_map_beam_terminal_density, maptype='roadmap',
source='google')
p = ggmap(map) +
geom_point(data=beam_centers_df, aes(x=lat, y=lng), fill="blue", size=2, shape=23) +
stat_density2d(
aes(x = LATITUDE_DEGREES, y = LONGITUDE_DEGREES, fill = ..level.., alpha = ..level..),
size = 1, bins = 8, data = df,
geom = "polygon"
) +
facet_wrap(~ ABSOLUTE_BEAM_ID) +
labs(title=paste0("Density plot of Terminals in ", config$gateway$gateway1.nw_name),
x="Longitude", y="Latitude", subtitle=config$gateway$beam_centers_location_text) +
theme_tufte()  +
theme(legend.position="none") +
theme(strip.text.x = element_text(size = 9)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
#guides(fill=guide_legend(title=""), col=guide_legend(title=""))
print(p)
#save_plot(config, p, "terminal_map_density.png", 4.5, 6)
#now make the same plot at a per country level
countries = unique(df$country)
for(c in countries)
{
#filter by each country, one at a time
flog.info("going to plot terminal density for beams in %s", c)
#we have to do this funny trick of creating a new column for beams
#because there seems to be no way to make ggplot2 forget about filtered
#out beams while doing facet_wrap
df_country = df_merged %>%
filter(country == c) %>%
mutate(NEW_ABSOLUTE_BEAM_ID = ABSOLUTE_BEAM_ID)
flog.info("following beams are present in %s", c)
flog.info(unique(df_country$ABSOLUTE_BEAM_ID))
map<-get_map_wrapper(location=c, zoom=config$gateway$gateway1.zoom_level_for_map_beam_terminal_density, maptype='roadmap',
source='google')
subtitle = paste0(c, " beams, ", config$gateway$gateway1.short_name, " Gateway")
p = ggmap(map) +
geom_point(data=beam_centers_df, aes(x=lat, y=lng), fill="blue", size=config$gateway$icon_size, shape=23) +
stat_density2d(
aes(x = LATITUDE_DEGREES, y = LONGITUDE_DEGREES, fill = ..level.., alpha = ..level..),
size = 1, bins = 8, data = df_country,
geom = "polygon"
) +
facet_wrap(~ NEW_ABSOLUTE_BEAM_ID) +
labs(title=paste0("Terminal density plot, ", config$gateway$gateway1.nw_name),
x="Longitude", y="Latitude", subtitle=subtitle) +
theme_tufte()  +
theme(legend.position="none") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
print(p)
fname = paste0(c, "_", "terminal_map_density.png")
save_plot(config, p, fname, subdir="maps", width=4.5, height=6)
}
}
plot_service_plan_distribution <- function(config, df)
{
# Plots a bar plot for the number of terminals per service plan
# Args:
#
#   df: dataframe, dataframe containing lat/long, service plan and other information for each terminal.
# Returns:
#
STACK_TRACE()
df_plans = df %>%
group_by(ABSOLUTE_BEAM_ID, SERVICE_PLAN_NAME) %>%
summarize(count = n())
save_csv(config, df_plans, "service_plans.csv")
p = df_plans %>%
filter(count > 10) %>%
ggplot(aes(x=reorder(SERVICE_PLAN_NAME, -count), y=count)) +
geom_col(position="dodge", width = .6) +
labs(title="Service plan distribution",
x="", y="Terminal Count", subtitle=config$gateway$gateway1.nw_name, caption="Plans with less than 10 Terminals not shown.") +
facet_wrap(~ABSOLUTE_BEAM_ID) +
theme_bw() +
theme(legend.position=c(0.8, 0.7),
legend.background = element_rect(fill = "transparent", size = 1),
axis.text.x = element_text(angle = 90, vjust=1, hjust=1, size=7))
print(p)
save_plot(config, p, "service_plan_distribution.png", 6, 4, subdir="plots")
df_plans = df %>%
filter(SPECTRAL_EFFICIENCY_BINNED == SPEC_EFFI_LOW) %>%
group_by(ABSOLUTE_BEAM_ID, SERVICE_PLAN_NAME) %>%
summarize(count = n())
p = df_plans %>%
filter(count > 10) %>%
ggplot(aes(x=reorder(SERVICE_PLAN_NAME, -count), y=count)) +
geom_col(position="dodge", width = .6) +
labs(title="Service plan distribution for low spectral efficiency Terminals",
x="", y="Terminal Count", subtitle=config$gateway$gateway1.nw_name, caption="Plans with less than 10 Terminals not shown.") +
facet_wrap(~ABSOLUTE_BEAM_ID) +
theme_bw() +
theme(legend.position=c(0.8, 0.7),
legend.background = element_rect(fill = "transparent", size = 1),
axis.text.x = element_text(angle = 0, vjust=1, hjust=1))
print(p)
save_plot(config, p, "service_plan_distribution_for_low_spectral_efficiency_terminals.png", subdir="plots")
}
plot_terminals_of_concern <- function(config, df_merged)
{
# Filters out Terminals with low spectral efficiency that download a lot of data
# Args:
#   config (list): configuration parameters
#   df_merged (dataframe), dataframe containing lat/long, service plan and other information for each terminal.
# Returns:
#
STACK_TRACE()
flog.info("plotting spectral efficiency and volume usage")
#plot a tile chart for spectral efficiency Vs usage
p <- df_merged %>%
group_by(SPECTRAL_EFFICIENCY_BINNED, TOTAL_USAGE_BINNED) %>%
summarise(count = n()) %>%
mutate(percentage = 100*count/sum(count)) %>%
ggplot(aes(SPECTRAL_EFFICIENCY_BINNED, TOTAL_USAGE_BINNED, fill = percentage)) +
geom_tile(show.legend = FALSE) +
geom_text(aes(label = paste0(round(percentage,2), "%")), color = "white") +
scale_fill_gradient(low="lightblue",high="darkblue") +
labs(title="Spectral efficiency based distribution of volume usage",
x="Spectral efficiency", y="Volume usage") +
theme_bw() +
theme(plot.title = element_text(size=12))
print(p)
save_plot(config, p, "usage_by_spec_effi.png", 6, 4, subdir="plots")
flog.info("plotting spectral efficiency and Service plans")
#plot a tile chart for spectral efficiency Vs usage
p <- df_merged %>%
group_by(SPECTRAL_EFFICIENCY_BINNED, SERVICE_PLAN_NAME) %>%
summarise(count = n()) %>%
mutate(percentage = 100*count/sum(count)) %>%
ggplot(aes(SPECTRAL_EFFICIENCY_BINNED, SERVICE_PLAN_NAME, fill = count)) +
geom_tile(show.legend = FALSE) +
geom_text(aes(label = count, color = "white")) +
scale_fill_gradient(low="lightblue",high="darkblue") +
labs(title="Spectral efficiency based distribution of service plans",
x="Spectral efficiency", y="Volume usage") +
theme_bw() +
theme(plot.title = element_text(size=10))
print(p)
save_plot(config, p, "serviceplans_by_spec_effi.png", 6, 4, subdir="plots")
p = df_merged %>%
group_by(ABSOLUTE_BEAM_ID, SPECTRAL_EFFICIENCY_BINNED) %>%
summarise(count = n()) %>%
ggplot(aes(x=SPECTRAL_EFFICIENCY_BINNED, y=count, fill=ABSOLUTE_BEAM_ID)) +
geom_col(position="dodge", width = .6) +
labs(title="Terminal count by spectral efficiency",
x="", y="Count", subtitle=config$gateway$gateway1.nw_name, caption="") +
theme_bw() +
guides(fill=guide_legend(title="")) +
theme(legend.position="bottom") +
scale_fill_brewer(palette = "Dark2")  # Color palette
#if there are more than 2 beams then facet the chart by beam
if(NROW(beam_centers_df) > 2)
{
p = p + facet_wrap(~ABSOLUTE_BEAM_ID) + theme(legend.position="none")
}
print(p)
save_plot(config, p, "terminal_counts_by_spectral_efficiency.png", 6, 4, subdir="plots")
x = df_merged %>%
group_by(SPECTRAL_EFFICIENCY_BINNED, TOTAL_USAGE_BINNED, SERVICE_PLAN_NAME) %>%
summarize(count = n())
save_csv(config, x, "spec_effi_usage_service_plans.csv")
p = x %>%
filter(count > 10) %>%
ggplot(aes(x=SPECTRAL_EFFICIENCY_BINNED, y=count, fill=TOTAL_USAGE_BINNED)) +
geom_col(position="dodge", width = .6) +
labs(title="Terminal count by spectral efficiency and usage",
x="", y="Count", subtitle=config$gateway$gateway1.nw_name, caption="") +
facet_wrap(~ SERVICE_PLAN_NAME) +
theme_bw() +
guides(fill=guide_legend(title="")) +
theme(axis.text.x = element_text(size = 7)) +
theme(strip.text.x = element_text(size = 7)) +
scale_fill_brewer(palette = "Dark2")  # Color palette
print(p)
save_plot(config, p, "terminal_counts_by_spectral_efficiency_usage_service_plans.png", 6, 4, subdir="plots")
x = df_merged %>%
#mutate(TOTAL_USAGE_ACROSS_TERMINALS = sum(TOTAL_USAGE)) %>%
group_by(SPECTRAL_EFFICIENCY_BINNED) %>%
summarise(TOTAL_USAGE_BY_SPEC_EFFI = sum(TOTAL_USAGE)) %>%
mutate(TOTAL_USAGE_PERCENT_BY_SPEC_EFFI = 100*TOTAL_USAGE_BY_SPEC_EFFI/sum(TOTAL_USAGE_BY_SPEC_EFFI))
#summarize(#TOTAL_USAGE_BY_SPEC_EFFI = sum(TOTAL_USAGE),
#       TOTAL_USAGE_PERCENT_BY_SPEC_EFFI = 100*(TOTAL_USAGE/TOTAL_USAGE_ACROSS_TERMINALS))
print(x)
save_csv(config, x, "usage_by_spec_effi.csv")
#low modcod terminals
frac = 0.1
x = df_merged %>%
arrange(desc(TOTAL_USAGE_BINNED)) %>%
head(NROW(df_merged) * 0.1) %>%
filter(SPECTRAL_EFFICIENCY_BINNED == SPEC_EFFI_LOW)
map<-get_map_wrapper(location=config$gateway$gateway1.location_for_map, zoom=config$gateway$gateway1.zoom_level_for_map, maptype='roadmap',
source='google')
title = paste0("Low modcod Terminals in the top ", frac*100, "% of Terminals with heaviest usage")
p = ggmap(map) +
geom_point(data=beam_centers_df, aes(x=lat, y=lng), fill="blue", size=2, shape=23) +
geom_point(data=x, aes(x=LATITUDE_DEGREES, y=LONGITUDE_DEGREES, fill=ABSOLUTE_BEAM_ID), size=2, shape=21) +
#facet_wrap(~ ABSOLUTE_BEAM_ID) +
labs(title=title,
x="Longitude", y="Latitude", subtitle=config$gateway$beam_centers_location_text) +
theme_tufte() +
theme(plot.title = element_text(size=8)) +
theme(legend.position="bottom") +
#theme(strip.text.x = element_text(size = 15)) +
scale_colour_discrete(guide = FALSE) +
guides(fill=guide_legend(title="")) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
print(p)
save_plot(config, p, "low_spec_effi_terminals_contributing_lot_of_traffic.png", width=4.5, height=6, subdir="maps")
#save_csv(config, x, "low_spec_effi_terminals_with_high_usage.csv")
#now make the same plot at a per country level
countries = unique(x$country)
for(c in countries)
{
#filter by each country, one at a time
flog.info("going to plot terminal density for beams in %s", c)
#we have to do this funny trick of creating a new column for beams
#because there seems to be no way to make ggplot2 forget about filtered
#out beams while doing facet_wrap
df_country = x %>%
filter(country == c) %>%
mutate(NEW_ABSOLUTE_BEAM_ID = ABSOLUTE_BEAM_ID)
flog.info("following beams are present in %s", c)
flog.info(unique(df_country$ABSOLUTE_BEAM_ID))
#lets plot these on a map
map<-get_map_wrapper(location=c, zoom=config$gateway$gateway1.zoom_level_for_map_beam, maptype='roadmap',
source='google')
title = paste0("Low modcod Terminals in the top ", frac*100, "% of Terminals with heaviest usage")
subtitle = paste0(c, " beams, ", config$gateway$gateway1.short_name, " Gateway")
p = ggmap(map) +
geom_point(data=beam_centers_df, aes(x=lat, y=lng), fill="blue", size=2, shape=23) +
geom_point(data=x, aes(x=LATITUDE_DEGREES, y=LONGITUDE_DEGREES, fill=ABSOLUTE_BEAM_ID), size=2, shape=21) +
#facet_wrap(~ ABSOLUTE_BEAM_ID) +
labs(title=title,
x="Longitude", y="Latitude", subtitle=subtitle) +
theme_tufte() +
theme(plot.title = element_text(size=8)) +
theme(legend.position="bottom") +
#theme(strip.text.x = element_text(size = 15)) +
scale_colour_discrete(guide = FALSE) +
guides(fill=guide_legend(title="")) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
print(p)
fname = paste0(c, "_", "low_spec_effi_terminals_contributing_lot_of_traffic.png")
save_plot(config, p, fname, subdir="maps", width=4.5, height=6)
}
#also save dataframe to csv so that we have actionable recommendations
x = x %>%
select(DEVICEID, ABSOLUTE_BEAM_ID, LATITUDE_DEGREES, LONGITUDE_DEGREES, ACTIVATION_DATE, SPECTRAL_EFFICIENCY, TOTAL_USAGE_BINNED)
}
find_terminals_in_wrong_beam <- function(config, df_merged)
{
# Use machine learning to find out Terminals which are in the wrong beam.
# This applies to Terminals in areas with overlapping beams. We make a machine
# learning model using all the Terminals which have a spectral efficiency of
# 3 and above and then use it on a test dataset of Terminals with spectral efficiency
# of [2,3). Just that lat/long are used as predictors and the response variable is
# the absolute beam id. The random forest classifier is used and it seems to give
# good results i.e. what you would expect by just eyeballing the Terminal allocation.
#
# Args:
#   config (list): configuration parameters
#   df_merged (data frame): data frame containing all the Terminal information
# Returns:
#   None
#
STACK_TRACE()
#random forest
set.seed(20092013)
flog.info("going to run random forest classifier to find out any mismatched beam allocations")
df_train = df_merged %>%
filter(SPECTRAL_EFFICIENCY_BINNED == "[3 and above)")
df_test  = df_merged %>%
filter(SPECTRAL_EFFICIENCY_BINNED == "[2 to 3)")
rf = randomForest(as.factor(ABSOLUTE_BEAM_ID) ~ LATITUDE_DEGREES + LONGITUDE_DEGREES, data=df_train)
train.accuracy = sum(df_train$ABSOLUTE_BEAM_ID == rf$predicted)/NROW(df_train)
preds = predict(rf, newdata=df_test)
test.accuracy = sum(df_test$ABSOLUTE_BEAM_ID == preds)/NROW(df_test)
flog.info("accuracy on training data is %f", train.accuracy)
flog.info("accuracy on test data is %f", test.accuracy)
df_test$PROPOSED_ABSOLUTE_BEAM_ID = preds
df_terminals_in_wrong_beam = df_test[df_test$ABSOLUTE_BEAM_ID != preds, ]
flog.info("Seems like there are %d Terminals in the wrong beam", NROW(df_terminals_in_wrong_beam))
#lets plot these on a map
map<-get_map_wrapper(location=config$gateway$gateway1.location_for_map, zoom=config$gateway$gateway1.zoom_level_for_map, maptype='roadmap',
source='google')
title = "Terminals in the wrong beam"
caption = "Terminals are marke as per their beam allocation today,\n suggested allocation is reverse of that."
p = ggmap(map) +
geom_point(data=beam_centers_df, aes(x=lat, y=lng), fill="blue", size=2, shape=23) +
geom_point(data=df_terminals_in_wrong_beam, aes(x=LATITUDE_DEGREES, y=LONGITUDE_DEGREES, fill=ABSOLUTE_BEAM_ID), size=1, shape=21) +
#facet_wrap(~ ABSOLUTE_BEAM_ID) +
labs(title=title,
x="Longitude", y="Latitude", subtitle=config$gateway$beam_centers_location_text, caption=caption) +
theme(plot.caption = element_text(size=7)) +
theme(legend.position="bottom") +
scale_colour_discrete(guide = FALSE) +
guides(fill=guide_legend(title="")) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
print(p)
#save_plot(config, p, "terminals_in_wrong_beam.png", width=4.5, height=6, subdir="maps")
#now make the same plot at a per country level
countries = unique(df_terminals_in_wrong_beam$country)
for(c in countries)
{
#filter by each country, one at a time
flog.info("going to plot terminal density for beams in %s", c)
#we have to do this funny trick of creating a new column for beams
#because there seems to be no way to make ggplot2 forget about filtered
#out beams while doing facet_wrap
df_country = df_terminals_in_wrong_beam %>%
filter(country == c) %>%
mutate(NEW_ABSOLUTE_BEAM_ID = ABSOLUTE_BEAM_ID)
flog.info("following beams are present in %s", c)
flog.info(unique(df_country$ABSOLUTE_BEAM_ID))
#lets plot these on a map
map<-get_map_wrapper(location=c, zoom=config$gateway$gateway1.zoom_level_for_map_beam, maptype='roadmap',
source='google')
title = "Terminals in the wrong beam"
caption = "Terminals are marked as per their beam allocation today"
subtitle= paste0(c, " beams")
p = ggmap(map) +
geom_point(data=beam_centers_df, aes(x=lat, y=lng), fill="blue", size=2, shape=23) +
geom_point(data=df_country, aes(x=LATITUDE_DEGREES, y=LONGITUDE_DEGREES, fill=ABSOLUTE_BEAM_ID), size=1, shape=21) +
labs(title=title,
x="Longitude", y="Latitude", subtitle=subtitle, caption=caption) +
theme(plot.caption = element_text(size=7)) +
theme(legend.position="bottom") +
scale_colour_discrete(guide = FALSE) +
guides(fill=guide_legend(title="")) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
print(p)
fname = paste0(c, "_", "terminals_in_wrong_beam.png")
save_plot(config, p, fname, subdir="maps", width=4.5, height=6)
}
#also store in CSV file
df_terminals_in_wrong_beam = df_terminals_in_wrong_beam %>%
select(DEVICEID, ABSOLUTE_BEAM_ID, PROPOSED_ABSOLUTE_BEAM_ID, LATITUDE_DEGREES, LONGITUDE_DEGREES, ACTIVATION_DATE, SPECTRAL_EFFICIENCY, TOTAL_USAGE_BINNED)
save_csv(config, df_terminals_in_wrong_beam, "terminals_in_wrong_beam.csv")
}
#main program starts here
#read configuration
#first read the nw.cfg file to see which network do we want to analyze
nw_Cfg_file = file.path(".//input", "nw.cfg")
#if files does not exists then dont continue
stopifnot(file.exists(nw_Cfg_file))
nw_config = read.ini(nw_Cfg_file)
#read config files from input foldee. All config files are named
#like "app.cfg.<nw name>.<gw name" for example "app.cfg.avanti.ghy"
app_cfg_file = nw_config$general$cfg_file_name
app_cfg_file = file.path(".//input", app_cfg_file)
config = read.ini(app_cfg_file)
config$gateway$gateway1.zoom_level_for_map = as.numeric(config$gateway$gateway1.zoom_level_for_map)
config$gateway$gateway1.zoom_level_for_map_beam = as.numeric(config$gateway$gateway1.zoom_level_for_map_beam)
config$gateway$icon_size = as.numeric(config$gateway$icon_size)
config$gateway$gateway1.zoom_level_for_map_beam_terminal_binned = as.numeric(config$gateway$gateway1.zoom_level_for_map_beam_terminal_binned)
config$gateway$gateway1.zoom_level_for_map_beam_terminal_density = as.numeric(config$gateway$gateway1.zoom_level_for_map_beam_terminal_density)
flog.info("Starting the %s module, config read from %s",
config$general$module_name, app_cfg_file)
#load any stored maps from the previous run
map_RData = file.path("data", config$network$short_name, config$gateway$gateway1.short_name, "tmp", "map_data.RData")
if(file.exists(map_RData)) {
flog.info("going to read map data from %s", map_RData)
load(map_RData)
flog.info("found the following maps in the stored map_RData")
flog.info(names(google_map_objs))
} else {
flog.info("did not find %s, all needed maps will be downloaded...", map_RData)
}
#lets start with reading the data
df = read_terminal_data_from_nms(config)
flog.info("here is the data we have ---->")
#print it out, since this is a tibble, only 5 rows would be printed
df
#convert the latlong to degrees, the data has lat/long values swapped
#so we need to take care of that as well
if ("LATITUDE_DEGREES" %!in% names(df) &&
"LATITUDE_DEGREES" %!in% names(df))
{
df = df %>%
mutate(LATITUDE_DEGREES = sapply(LATITUDE, convert_ISO6709),
LONGITUDE_DEGREES = sapply(LONGITUDE, convert_ISO6709))
}
df = df %>%
mutate(ABSOLUTE_BEAM_ID = paste0("Beam ", ABSOLUTE_BEAM_ID)) %>%
rename(DEVICEID=DEVICE_ID)
#get beam centers
beam_centers_df = get_beam_centers(config)
#now read IPGW data also, this is the ATL command data from the IPGW
#exclude rows with empty device id (why does this happen at all?)
#add new column to get spectral efficiency from modcod and another one
#to bin the spectral efficiency
df_atl = read_terminal_data_from_ipgw(config)
df_atl = df_atl %>%
filter(DEVICEID != "") %>%
mutate(SPECTRAL_EFFICIENCY = sapply(CurrentModCodValue, get_bits_per_symbol)) %>%
mutate(SPECTRAL_EFFICIENCY_BINNED = sapply(SPECTRAL_EFFICIENCY, bin_spectral_efficiency)) %>%
mutate(TOTAL_USAGE = round(CAPOVERALL + CAPOPOVERALL - USGOPOVERALL - USGOVERALL)/1000) %>%
mutate(TOTAL_USAGE_BINNED = sapply(TOTAL_USAGE, bin_total_usage))
df_error= df_atl %>% filter(SPECTRAL_EFFICIENCY == -1)
save_csv(config, df_error, "error.csv")
#join the two datasets, so that we can combine geolocation with say modcod information
df_merged = merge(df, df_atl, by="DEVICEID")
#also join beam center information
df_merged = merge(df_merged, beam_centers_df, by="ABSOLUTE_BEAM_ID")
save_csv(config, df_merged, "vsat_merged_df.csv")
#binned terminal map
Sys.sleep(1)  # API only allows 5 requests per second
plot_terminal_locations_binned(config, beam_centers_df, df_merged)
#binned terminal map with modcod overlayed
Sys.sleep(1)  # API only allows 5 requests per second
plot_terminal_locations_w_modcod_info_binned(config, beam_centers_df, df_merged)
#binned terminal map with usage overlayed
Sys.sleep(1)  # API only allows 5 requests per second
plot_terminal_locations_w_usage_info_binned(config, beam_centers_df, df_merged)
#density plot for terminals
Sys.sleep(1)  # API only allows 5 requests per second
plot_terminal_locations_density(config, beam_centers_df, df_merged)
#service plan information
Sys.sleep(1)  # API only allows 5 requests per second
plot_service_plan_distribution(config, df)
#new terminal activation by month
Sys.sleep(1)  # API only allows 5 requests per second
plot_terminal_growth(config, beam_centers_df, df_merged)
